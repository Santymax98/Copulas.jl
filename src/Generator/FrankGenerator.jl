"""
    FrankGenerator{T}

Fields:
  - Œ∏::Real - parameter

Constructor

    FrankGenerator(Œ∏)
    FrankCopula(d,Œ∏)

The [Frank](https://en.wikipedia.org/wiki/Copula_(probability_theory)#Most_important_Archimedean_copulas) copula in dimension ``d`` is parameterized by ``\\theta \\in (-\\infty,\\infty)`` (with independence as the limit ``\\theta\\to 0``). It is an Archimedean copula with generator

```math
\\phi(t) = -\\tfrac{1}{\\theta} \\log\\big( 1 - (1 - e^{-\\theta}) e^{-t} \\big).
```

Special cases:
- When ``\\theta \\to -\\infty``, it is the WCopula (Lower Fr√©chet‚ÄìHoeffding bound)
- When ``\\theta \\to 0``, it is the IndependentCopula
- When ``\\theta \\to \\infty``, it is the MCopula (Upper Fr√©chet‚ÄìHoeffding bound)

References:
* [nelsen2006](@cite) Nelsen, Roger B. An introduction to copulas. Springer, 2006.
"""
struct FrankGenerator{T} <: AbstractUnivariateGenerator
    Œ∏::T
    function FrankGenerator(Œ∏)
        if Œ∏ == -Inf
            return WGenerator()
        elseif Œ∏ == 0
            return IndependentGenerator()
        elseif Œ∏ == Inf
            return MGenerator()
        else
            Œ∏, _ = promote(Œ∏, 1.0)
            return new{typeof(Œ∏)}(Œ∏)
        end
    end
end
const FrankCopula{d, T} = ArchimedeanCopula{d, FrankGenerator{T}}
FrankCopula(d, Œ∏) = ArchimedeanCopula(d, FrankGenerator(Œ∏))
FrankCopula(d; Œ∏::Real) = FrankCopula(d, Œ∏)
max_monotony(G::FrankGenerator) = G.Œ∏ < 0 ? 2 : Inf

Distributions.params(G::FrankGenerator) = (Œ∏ = G.Œ∏,)
_example(CT::Type{<:FrankCopula}, d) = FrankCopula(d, 1.0)
_unbound_params(::Type{<:FrankCopula}, d, Œ∏) = d == 2 ? [Œ∏.Œ∏] : [log(Œ∏.Œ∏)]
_rebound_params(::Type{<:FrankCopula}, d, Œ±) = d==2 ? (; Œ∏ = Œ±[1]) : (; Œ∏ = exp(Œ±[1]))
_Œ∏_bounds(::Type{<:FrankGenerator}, d) = d==2 ? (-Inf, Inf) : (0, Inf)


œï(G::FrankGenerator, t) = G.Œ∏ > 0 ? -LogExpFunctions.log1mexp(LogExpFunctions.log1mexp(-G.Œ∏)-t)/G.Œ∏ : -log1p(exp(-t) * expm1(-G.Œ∏))/G.Œ∏
œï‚ÅΩ¬π‚Åæ(G::FrankGenerator, t) = (1 - 1 / (1 + exp(-t)*expm1(-G.Œ∏))) / G.Œ∏
œï‚Åª¬π‚ÅΩ¬π‚Åæ(G::FrankGenerator, t) = G.Œ∏ / (-expm1(G.Œ∏ * t))
function œï‚ÅΩ·µè‚Åæ(G::FrankGenerator, ::Val{k}, t) where k
    return (-1)^k * (1 / G.Œ∏) * PolyLog.reli(-(k - 1), -expm1(-G.Œ∏) * exp(-t))
end
œï‚Åª¬π(G::FrankGenerator, t) = G.Œ∏ > 0 ? LogExpFunctions.log1mexp(-G.Œ∏) - LogExpFunctions.log1mexp(-t*G.Œ∏) : -log(expm1(-t*G.Œ∏)/expm1(-G.Œ∏))
williamson_dist(G::FrankGenerator, ::Val{d}) where d = G.Œ∏ > 0 ? WilliamsonFromFrailty(Logarithmic(-G.Œ∏), Val{d}()) : WilliamsonTransforms.ùí≤‚Çã‚ÇÅ(t -> œï(G,t),Val{d}())
frailty(G::FrankGenerator) = G.Œ∏ > 0 ? Logarithmic(-G.Œ∏) : throw("The frank copula has no frailty when Œ∏ < 0")
Debye(x, k::Int=1) = k / x^k * QuadGK.quadgk(t -> t^k/expm1(t), 0, x)[1]
function _frank_tau(Œ∏)
    T = promote_type(typeof(Œ∏),Float64)
    if abs(Œ∏) < sqrt(eps(T))
        # return the taylor approx.
        return Œ∏/9 * (1 - (Œ∏/10)^2)
    else
        return 1+4(Debye(Œ∏,1)-1)/Œ∏
    end
end
œÑ(G::FrankGenerator) = _frank_tau(G.Œ∏)
function œÑ‚Åª¬π(::Type{T},tau) where T<:FrankGenerator
    s,v = sign(tau),abs(tau)
    if v == 0
        return v
    elseif v == 1
        return s * Inf
    else
        return s*Roots.fzero(x -> _frank_tau(x)-v, 0, Inf)
    end
end

function œÅ(G::FrankGenerator)
    Œ∏ = G.Œ∏
    (-Inf < Œ∏ < Inf) || throw(ArgumentError("Frank definido para Œ∏‚àà‚Ñù\\{0}"))
    abs(Œ∏) < 1e-8 && return Œ∏/6
    return 1 + 12*(Debye(Œ∏,2) - Debye(Œ∏,1))/Œ∏
end

function œÅ‚Åª¬π(::Type{FrankGenerator}, œÅÃÇ::Real; tol::Real=1e-10)
    œÅc = clamp(œÅÃÇ, -1+1e-12, 1-1e-12)

    f(Œ∏) = œÅ(FrankGenerator(Œ∏)) - œÅc

    # bracketing adaptative
    # for œÅ>0 search Œ∏>0, for œÅ<0 Œ∏<0
    if œÅc > 0
        a, b = 1e-6, 50.0
        while f(a)*f(b) > 0 && b < 1e6
            b *= 2
        end
    else
        a, b = -50.0, -1e-6
        while f(a)*f(b) > 0 && a > -1e6
            a *= 2
        end
    end

    return Roots.find_zero(f, (a,b), Roots.Brent(); xatol=tol, rtol=0)
end
