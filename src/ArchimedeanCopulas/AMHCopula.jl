"""
    AMHCopula{d,T}

Fields:
  - Œ∏::Real - parameter

Constructor

    AMHCopula(d, Œ∏)

The [AMH](https://en.wikipedia.org/wiki/Copula_(probability_theory)#Most_important_Archimedean_copulas) copula in dimension ``d`` is parameterized by ``\\theta \\in [-1,1)``. It is an Archimedean copula with generator : 

```math
\\phi(t) = 1 - \\frac{1-\\theta}{e^{-t}-\\theta}
```

It has a few special cases: 
- When Œ∏ = 0, it is the IndependentCopula
"""
struct AMHCopula{d,T} <: ArchimedeanCopula{d}
    Œ∏::T
    function AMHCopula(d,Œ∏)
        if (Œ∏ < -1) || (Œ∏ >= 1)
            throw(ArgumentError("Theta must be in [-1,1)"))
        elseif Œ∏ == 0
            return IndependentCopula(d)
        else
            return new{d,typeof(Œ∏)}(Œ∏)
        end
    end
end
œï(  C::AMHCopula,t) = (1-C.Œ∏)/(exp(t)-C.Œ∏)
œï‚Åª¬π(  C::AMHCopula,t) = log(C.Œ∏ + (1-C.Œ∏)/t)

œÑ(C::AMHCopula) = _amh_tau_f(C.Œ∏) # no closed form inverse...

function _amh_tau_f(Œ∏)

    # unstable around zero, we instead cut its taylor expansion: 
    if abs(Œ∏) < 0.01
        return 2/9  * Œ∏
            + 1/18  * Œ∏^2 
            + 1/45  * Œ∏^3
            + 1/90  * Œ∏^4
            + 2/315 * Œ∏^5
            + 1/252 * Œ∏^6
            + 1/378 * Œ∏^7
            + 1/540 * Œ∏^8
            + 2/1485 * Œ∏^9
            + 1/990 * Œ∏^10
    end
    if iszero(Œ∏)
        return zero(Œ∏)
    end
    u = isone(Œ∏) ? Œ∏ : Œ∏ + (1-Œ∏)^2 * log1p(-Œ∏)
    return 1 - (2/3)*u/Œ∏^2
end
function œÑ‚Åª¬π(::Type{AMHCopula},tau)
    if tau == zero(tau)
        return tau
    elseif tau > 1/3
        @warn "AMHCopula cannot handle kendall tau's greater than 1/3. We capped it to 1/3."
        return one(œÑ)
    elseif tau < (5 - 8*log(2))/3
        @warn "AMHCopula cannot handle kendall tau's smaller than (5- 8ln(2))/3 (approx -0.1817). We capped it to this value."
        return -one(tau)
    end
    search_range = tau > 0 ? (0,1) : (-1,0)
    return Roots.find_zero(Œ∏ -> tau - _amh_tau_f(Œ∏), search_range)
end
williamson_dist(C::AMHCopula{d,T}) where {d,T} = C.Œ∏ >= 0 ? WilliamsonFromFrailty(1 + Distributions.Geometric(1-C.Œ∏),d) : WilliamsonTransforms.ùí≤‚Çã‚ÇÅ(t -> œï(C,t),d)


